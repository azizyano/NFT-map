{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\aziz\\\\Desktop\\\\NFT token\\\\mobileapp\\\\client\\\\App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport \"./global\";\nimport { web3, kit } from \"./root\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport { requestTxSig, waitForSignedTxs, requestAccountAddress, waitForAccountAuth, FeeCurrency } from '@celo/dappkit';\nimport { toTxResult } from \"@celo/connect\";\nimport * as Linking from 'expo-linking';\nimport HelloWorldContract from \"./contracts/HelloWorld.json\";\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream']);\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      address: 'Not logged in',\n      phoneNumber: 'Not logged in',\n      cUSDBalance: 'Not logged in',\n      helloWorldContract: {},\n      contractName: '',\n      textInput: ''\n    };\n\n    _this.componentDidMount = function _callee() {\n      var networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(web3.eth.net.getId());\n\n            case 2:\n              networkId = _context.sent;\n              deployedNetwork = HelloWorldContract.networks[networkId];\n              instance = new web3.eth.Contract(HelloWorldContract.abi, deployedNetwork && deployedNetwork.address);\n\n              _this.setState({\n                helloWorldContract: instance\n              });\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.login = function _callee2() {\n      var requestId, dappName, callback, dappkitResponse, stableToken, cUSDBalanceBig, cUSDBalance;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestId = 'login';\n              dappName = 'Hello Celo';\n              callback = Linking.makeUrl('/my/path');\n              requestAccountAddress({\n                requestId: requestId,\n                dappName: dappName,\n                callback: callback\n              });\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(waitForAccountAuth(requestId));\n\n            case 6:\n              dappkitResponse = _context2.sent;\n              kit.defaultAccount = dappkitResponse.address;\n              _context2.next = 10;\n              return _regeneratorRuntime.awrap(kit.contracts.getStableToken());\n\n            case 10:\n              stableToken = _context2.sent;\n              _context2.next = 13;\n              return _regeneratorRuntime.awrap(stableToken.balanceOf(kit.defaultAccount));\n\n            case 13:\n              cUSDBalanceBig = _context2.sent;\n              cUSDBalance = cUSDBalanceBig.toString();\n\n              _this.setState({\n                cUSDBalance: cUSDBalance,\n                isLoadingBalance: false,\n                address: dappkitResponse.address,\n                phoneNumber: dappkitResponse.phoneNumber\n              });\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.read = function _callee3() {\n      var name;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(_this.state.helloWorldContract.methods.getName().call());\n\n            case 2:\n              name = _context3.sent;\n\n              _this.setState({\n                contractName: name\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.write = function _callee4() {\n      var requestId, dappName, callback, txObject, dappkitResponse, tx, result;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              requestId = 'update_name';\n              dappName = 'Hello Celo';\n              callback = Linking.makeUrl('/my/path');\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(_this.state.helloWorldContract.methods.setName(_this.state.textInput));\n\n            case 5:\n              txObject = _context4.sent;\n              requestTxSig(kit, [{\n                from: _this.state.address,\n                to: _this.state.helloWorldContract.options.address,\n                tx: txObject,\n                feeCurrency: FeeCurrency.cUSD\n              }], {\n                requestId: requestId,\n                dappName: dappName,\n                callback: callback\n              });\n              _context4.next = 9;\n              return _regeneratorRuntime.awrap(waitForSignedTxs(requestId));\n\n            case 9:\n              dappkitResponse = _context4.sent;\n              tx = dappkitResponse.rawTxs[0];\n              _context4.next = 13;\n              return _regeneratorRuntime.awrap(toTxResult(kit.web3.eth.sendSignedTransaction(tx)).waitReceipt());\n\n            case 13:\n              result = _context4.sent;\n              console.log(\"Hello World contract update transaction receipt: \", result);\n\n            case 15:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.onChangeText = function _callee5(text) {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _this.setState({\n                textInput: text\n              });\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      }, React.createElement(Image, {\n        resizeMode: \"contain\",\n        source: require(\"./assets/white-wallet-rings.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }\n      }, \"Open up client/App.js to start working on your app!\"), React.createElement(Text, {\n        style: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, \"Login first\"), React.createElement(Button, {\n        title: \"login()\",\n        onPress: function onPress() {\n          return _this2.login();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }\n      }, \"Account Info:\"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }\n      }, \"Current Account Address:\"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }, this.state.address), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }, \"Phone number: \", this.state.phoneNumber), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }, \"cUSD Balance: \", this.state.cUSDBalance), React.createElement(Text, {\n        style: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }\n      }, \"Read HelloWorld\"), React.createElement(Button, {\n        title: \"Read Contract Name\",\n        onPress: function onPress() {\n          return _this2.read();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }, \"Contract Name: \", this.state.contractName), React.createElement(Text, {\n        style: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, \"Write to HelloWorld\"), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }\n      }, \"New contract name:\"), React.createElement(TextInput, {\n        style: {\n          borderColor: 'black',\n          borderWidth: 1,\n          backgroundColor: 'white'\n        },\n        placeholder: \"input new name here\",\n        onChangeText: function onChangeText(text) {\n          return _this2.onChangeText(text);\n        },\n        value: this.state.textInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        style: {\n          padding: 30\n        },\n        title: \"update contract name\",\n        onPress: function onPress() {\n          return _this2.write();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#35d07f',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    marginVertical: 8,\n    fontSize: 20,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["C:/Users/aziz/Desktop/NFT token/mobileapp/client/App.js"],"names":["React","web3","kit","requestTxSig","waitForSignedTxs","requestAccountAddress","waitForAccountAuth","FeeCurrency","toTxResult","Linking","HelloWorldContract","YellowBox","ignoreWarnings","App","state","address","phoneNumber","cUSDBalance","helloWorldContract","contractName","textInput","componentDidMount","eth","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","setState","login","requestId","dappName","callback","makeUrl","dappkitResponse","defaultAccount","contracts","getStableToken","stableToken","balanceOf","cUSDBalanceBig","toString","isLoadingBalance","read","methods","getName","call","name","write","setName","txObject","from","to","options","tx","feeCurrency","cUSD","rawTxs","sendSignedTransaction","waitReceipt","result","console","log","onChangeText","text","styles","container","require","title","borderColor","borderWidth","backgroundColor","padding","Component","StyleSheet","create","flex","alignItems","justifyContent","marginVertical","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './global'\nimport { web3, kit } from './root'\nimport { Image, StyleSheet, Text, TextInput, Button, View, YellowBox } from 'react-native'\nimport {   \n  requestTxSig,\n  waitForSignedTxs,\n  requestAccountAddress,\n  waitForAccountAuth,\n  FeeCurrency\n} from '@celo/dappkit'\nimport { toTxResult } from \"@celo/connect\"\nimport * as Linking from 'expo-linking'\nimport HelloWorldContract from './contracts/HelloWorld.json'\n\n\nYellowBox.ignoreWarnings(['Warning: The provided value \\'moz', 'Warning: The provided value \\'ms-stream'])\n\nexport default class App extends React.Component {\n\n  // Set the defaults for the state\n  state = {\n    address: 'Not logged in',\n    phoneNumber: 'Not logged in',\n    cUSDBalance: 'Not logged in',\n    helloWorldContract: {},\n    contractName: '',\n    textInput: ''\n  }\n\n  // This function is called when the page successfully renders\n  componentDidMount = async () => {\n    \n    // Check the Celo network ID\n    const networkId = await web3.eth.net.getId();\n    \n    // Get the deployed HelloWorld contract info for the appropriate network ID\n    const deployedNetwork = HelloWorldContract.networks[networkId];\n\n    // Create a new contract instance with the HelloWorld contract info\n    const instance = new web3.eth.Contract(\n      HelloWorldContract.abi,\n      deployedNetwork && deployedNetwork.address\n    );\n\n    // Save the contract instance\n    this.setState({ helloWorldContract: instance })\n  }\n\n  login = async () => {\n    \n    // A string you can pass to DAppKit, that you can use to listen to the response for that request\n    const requestId = 'login'\n    \n    // A string that will be displayed to the user, indicating the DApp requesting access/signature\n    const dappName = 'Hello Celo'\n    \n    // The deeplink that the Celo Wallet will use to redirect the user back to the DApp with the appropriate payload.\n    const callback = Linking.makeUrl('/my/path')\n  \n    // Ask the Celo Alfajores Wallet for user info\n    requestAccountAddress({\n      requestId,\n      dappName,\n      callback,\n    })\n  \n    // Wait for the Celo Wallet response\n    const dappkitResponse = await waitForAccountAuth(requestId)\n\n    // Set the default account to the account returned from the wallet\n    kit.defaultAccount = dappkitResponse.address\n\n    // Get the stabel token contract\n    const stableToken = await kit.contracts.getStableToken()\n\n    // Get the user account balance (cUSD)\n    const cUSDBalanceBig = await stableToken.balanceOf(kit.defaultAccount)\n    \n    // Convert from a big number to a string\n    let cUSDBalance = cUSDBalanceBig.toString()\n    \n    // Update state\n    this.setState({ cUSDBalance, \n                    isLoadingBalance: false,\n                    address: dappkitResponse.address, \n                    phoneNumber: dappkitResponse.phoneNumber })\n  }\n\n  read = async () => {\n    \n    // Read the name stored in the HelloWorld contract\n    let name = await this.state.helloWorldContract.methods.getName().call()\n    \n    // Update state\n    this.setState({ contractName: name })\n  }\n\n  write = async () => {\n    const requestId = 'update_name'\n    const dappName = 'Hello Celo'\n    const callback = Linking.makeUrl('/my/path')\n\n    // Create a transaction object to update the contract with the 'textInput'\n    const txObject = await this.state.helloWorldContract.methods.setName(this.state.textInput)\n\n    // Send a request to the Celo wallet to send an update transaction to the HelloWorld contract\n    requestTxSig(\n      kit,\n      [\n        {\n          from: this.state.address,\n          to: this.state.helloWorldContract.options.address,\n          tx: txObject,\n          feeCurrency: FeeCurrency.cUSD\n        }\n      ],\n      { requestId, dappName, callback }\n    )\n\n    // Get the response from the Celo wallet\n    const dappkitResponse = await waitForSignedTxs(requestId)\n    const tx = dappkitResponse.rawTxs[0]\n    \n    // Get the transaction result, once it has been included in the Celo blockchain\n    let result = await toTxResult(kit.web3.eth.sendSignedTransaction(tx)).waitReceipt()\n\n    console.log(`Hello World contract update transaction receipt: `, result)  \n  }\n\n  onChangeText = async (text) => {\n    this.setState({textInput: text})\n  }\n\n  render(){\n    return (\n      <View style={styles.container}>\n        <Image resizeMode='contain' source={require(\"./assets/white-wallet-rings.png\")}></Image>\n        <Text>Open up client/App.js to start working on your app!</Text>\n        \n        <Text style={styles.title}>Login first</Text>\n        <Button title=\"login()\" \n          onPress={()=> this.login()} />\n                <Text style={styles.title}>Account Info:</Text>\n        <Text>Current Account Address:</Text>\n        <Text>{this.state.address}</Text>\n        <Text>Phone number: {this.state.phoneNumber}</Text>\n        <Text>cUSD Balance: {this.state.cUSDBalance}</Text>\n\n        <Text style={styles.title}>Read HelloWorld</Text>\n        <Button title=\"Read Contract Name\" \n          onPress={()=> this.read()} />\n        <Text>Contract Name: {this.state.contractName}</Text>\n        \n        <Text style={styles.title}>Write to HelloWorld</Text>\n        <Text>New contract name:</Text>\n        <TextInput\n          style={{  borderColor: 'black', borderWidth: 1, backgroundColor: 'white' }}\n          placeholder=\"input new name here\"\n          onChangeText={text => this.onChangeText(text)}\n          value={this.state.textInput}\n          />\n        <Button style={{padding: 30}} title=\"update contract name\" \n          onPress={()=> this.write()} />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#35d07f',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    marginVertical: 8, \n    fontSize: 20, \n    fontWeight: 'bold'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}